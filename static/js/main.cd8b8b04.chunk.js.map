{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","totalPages","Math","ceil","useEffect","className","classNames","disabled","href","onClick","Array","from","length","_","i","page","active","handlePageClick","items","to","numbers","n","push","getNumbers","map","App","useState","setCurrentPage","setPerPage","startIndex","endIndex","displayedItems","slice","startItem","endItem","min","id","value","onChange","e","Number","target","htmlFor","newPage","item","ReactDOM","render","document","getElementById"],"mappings":"oNAUaA,EAAwC,SAAC,GAK/C,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAaC,KAAKC,KAAKN,EAAQC,GA2BrC,OANAM,qBAAU,WACJH,EAAaF,GACfC,EAAaC,KAEd,CAACJ,EAAOI,EAAYF,IAGrB,8BACE,qBAAIM,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YAAa,CAAEC,SAAUR,GAAe,IAAlE,SACE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAK,QACL,gBAAeT,GAAe,EAAI,OAAS,QAC3CU,QA5BS,WACbV,EAAc,GAChBC,EAAaD,EAAc,IAqBvB,oBAWDW,MAAMC,KAAK,CAAEC,OAAQX,IAAc,SAACY,EAAGC,GACtC,IAAMC,EAAOD,EAAI,EAEjB,OACE,oBAEET,UAAWC,IACT,YAAa,CAAEU,OAAQjB,IAAgBgB,IAEzC,yBAAiBA,GALnB,SAOE,mBACEV,UAAU,YACV,UAAQ,WACRG,KAAI,WAAMO,GACVN,QAAS,YAvDC,SAACM,GACnBhB,IAAgBgB,GAClBf,EAAae,GAsDDE,CAAgBF,IALpB,SAQGA,KAdEA,MAoBX,oBACEV,UAAWC,IACT,YAAa,CAAEC,SAAUR,GAAeE,IAF5C,SAKE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAAeT,GAAeE,EAAa,OAAS,QACpDQ,QA/DS,WACbV,EAAcE,GAChBD,EAAaD,EAAc,IAwDvB,0BClFJmB,ECNC,SAAoBP,EAAcQ,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIV,EAAMU,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDDKG,CAAW,EAAG,IACzBC,KAAI,SAAAH,GAAC,qBAAYA,MAEPI,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAO3B,EAAP,KAAoB4B,EAApB,KACA,EAA8BD,mBAAS,GAAvC,mBAAO5B,EAAP,KAAgB8B,EAAhB,KAWMC,GAAc9B,EAAc,GAAKD,EACjCgC,EAAWD,EAAa/B,EACxBiC,EAAiBb,EAAMc,MAAMH,EAAYC,GAEzCG,GAAalC,EAAc,GAAKD,EAAU,EAC1CoC,EAAUhC,KAAKiC,IAAIpC,EAAcD,EAASoB,EAAMN,QAEtD,OACE,sBAAKP,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWN,EADX,mBACiCkC,EADjC,cACgDC,EADhD,eAC8DhB,EAAMN,OADpE,OAIA,sBAAKP,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACR+B,GAAG,kBACH/B,UAAU,eACVgC,MAAOvC,EACPwC,SA3BkB,SAACC,GAC3BX,EAAWY,OAAOD,EAAEE,OAAOJ,QAC3BV,EAAe,IAoBT,UAOE,wBAAQU,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOK,QAAQ,kBAAkBrC,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACER,MAAOqB,EAAMN,OACbb,YAAaA,EACbD,QAASA,EACTE,aAjDmB,SAAC2C,GACxBhB,EAAegB,MAmDb,6BACGZ,EAAeP,KAAI,SAACoB,GAAD,OAClB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YEhEnBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.cd8b8b04.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useEffect } from 'react';\n\ntype PaginationProps = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (newPage: number) => void,\n};\n\nexport const Pagination: React.FC<PaginationProps> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const totalPages = Math.ceil(total / perPage);\n\n  const handlePageClick = (page: number) => {\n    if (currentPage !== page) {\n      onPageChange(page);\n    }\n  };\n\n  const handlePrev = () => {\n    if (currentPage > 1) {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  const handleNext = () => {\n    if (currentPage < totalPages) {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  // check for current page to never be higher than total\n  useEffect(() => {\n    if (totalPages < currentPage) {\n      onPageChange(totalPages);\n    }\n  }, [total, totalPages, currentPage]);\n\n  return (\n    <div>\n      <ul className=\"pagination\">\n        <li className={classNames('page-item', { disabled: currentPage <= 1 })}>\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage <= 1 ? 'true' : 'false'}\n            onClick={handlePrev}\n          >\n            «\n          </a>\n        </li>\n\n        {Array.from({ length: totalPages }, (_, i) => {\n          const page = i + 1;\n\n          return (\n            <li\n              key={page}\n              className={classNames(\n                'page-item', { active: currentPage === page },\n              )}\n              data-cy={`page-${page}`}\n            >\n              <a\n                className=\"page-link\"\n                data-cy=\"pageLink\"\n                href={`#${page}`}\n                onClick={() => {\n                  handlePageClick(page);\n                }}\n              >\n                {page}\n              </a>\n            </li>\n          );\n        })}\n\n        <li\n          className={classNames(\n            'page-item', { disabled: currentPage >= totalPages },\n          )}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage >= totalPages ? 'true' : 'false'}\n            onClick={handleNext}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination/Pagination';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n  };\n\n  const handlePerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(Number(e.target.value));\n    setCurrentPage(1);\n  };\n\n  const startIndex = (currentPage - 1) * perPage;\n  const endIndex = startIndex + perPage;\n  const displayedItems = items.slice(startIndex, endIndex);\n\n  const startItem = (currentPage - 1) * perPage + 1;\n  const endItem = Math.min(currentPage * perPage, items.length);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${startItem} - ${endItem} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={handlePerPageChange}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items.length}\n        currentPage={currentPage}\n        perPage={perPage}\n        onPageChange={handlePageChange}\n      />\n\n      <ul>\n        {displayedItems.map((item) => (\n          <li key={item} data-cy=\"item\">\n            {item}\n          </li>\n        ))}\n      </ul>\n\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}